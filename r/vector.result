-- Test Variable

SET @a = VEC_FROM_TEXT('[1,2,3]');
SELECT @a;
@a
[1,2,3]

-- Test CREATE/DROP TABLE Statement

DROP TABLE IF EXISTS t;
SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE = 0;
CREATE TABLE t (embedding VECTOR);
Error 1105 (HY000): vector type is not supported
SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE = 1;
CREATE TABLE t (embedding VECTOR);

-- Test ALTER TABLE Statement

ALTER TABLE t SET TIFLASH REPLICA 1;
SELECT SLEEP(10);
SLEEP(10)
0
SELECT REPLICA_COUNT, AVAILABLE, PROGRESS FROM INFORMATION_SCHEMA.TIFLASH_REPLICA WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 't';
REPLICA_COUNT	AVAILABLE	PROGRESS
1	1	1

-- Test INSERT Statement

INSERT INTO t VALUES ('[1,2.1,3.3]');
INSERT INTO t VALUES ('[1,2.1,null]');
Error 1105 (HY000): Invalid vector text: [1,2.1,null]
INSERT INTO t VALUES ('[1,2.1,inf]');
Error 1105 (HY000): Invalid vector text: [1,2.1,inf]
INSERT INTO t VALUES ('[1,2.1,nan]');
Error 1105 (HY000): Invalid vector text: [1,2.1,nan]
INSERT INTO t VALUES ('[]');
INSERT INTO t VALUES (NULL);
INSERT INTO t VALUES ('[4,5,6]'), ('[7,8,9]');
INSERT INTO t (SELECT '[1,2,3]' UNION SELECT '[1,2,3]');

-- Test UPDATE Statement

UPDATE t SET embedding = VEC_FROM_TEXT('[1,2,3]') WHERE embedding = VEC_FROM_TEXT('[1,2.1,3.3]');
BEGIN;
SELECT * FROM t WHERE embedding = VEC_FROM_TEXT('[]') FOR UPDATE;
embedding
[]
UPDATE t SET embedding = NULL WHERE embedding = VEC_FROM_TEXT('[]');
COMMIT;

-- Test DELETE Statement

DELETE FROM t WHERE embedding IS NULL;

-- Test SELECT Statement

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t;
embedding
[1,2,3]
[1,2,3]
[4,5,6]
[7,8,9]
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t;
id	estRows	task	access object	operator info
TableReader	10000.00	root		data:TableFullScan
└─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t;
embedding
[1,2,3]
[1,2,3]
[4,5,6]
[7,8,9]
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t;
id	estRows	task	access object	operator info
TableReader	10000.00	root		data:TableFullScan
└─TableFullScan	10000.00	cop[tiflash]	table:t	keep order:false, stats:pseudo

-- Test ANALYZE TABLE Statement

ANALYZE TABLE t;

-- Test ORDER BY Clause

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES
('[8.7, 5.7, 7.7, 9.8, 1.5]'),
('[3.6, 9.7, 2.4, 6.6, 4.9]'),
('[4.7, 4.9, 2.6, 5.2, 7.4]'),
('[7.7, 6.7, 8.3, 7.8, 5.7]'),
('[1.4, 4.5, 8.5, 7.7, 6.2]');
SELECT * FROM t ORDER BY embedding DESC;
embedding
[8.7,5.7,7.7,9.8,1.5]
[7.7,6.7,8.3,7.8,5.7]
[4.7,4.9,2.6,5.2,7.4]
[3.6,9.7,2.4,6.6,4.9]
[1.4,4.5,8.5,7.7,6.2]

-- Test VEC_DIMS() Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ VEC_DIMS(embedding) FROM t;
VEC_DIMS(embedding)
5
5
5
5
5
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ VEC_DIMS(embedding) FROM t;
VEC_DIMS(embedding)
5
5
5
5
5
SELECT VEC_DIMS(NULL);
VEC_DIMS(NULL)
NULL
SELECT VEC_DIMS('[]');
VEC_DIMS('[]')
0
SELECT VEC_DIMS('[5, 3, 2]');
VEC_DIMS('[5, 3, 2]')
3

-- Test Vector VEC_FROM_TEXT() Function

SELECT VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]')
[]

-- Test IS Operators

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1, 2, 3]'), ('[4, 5, 6]'), ('[7, 8, 9]');
SELECT VEC_FROM_TEXT('[]') IS TRUE;
VEC_FROM_TEXT('[]') IS TRUE
0
SELECT VEC_FROM_TEXT('[]') IS FALSE;
VEC_FROM_TEXT('[]') IS FALSE
1
SELECT VEC_FROM_TEXT('[]') IS UNKNOWN;
VEC_FROM_TEXT('[]') IS UNKNOWN
0
SELECT VEC_FROM_TEXT('[]') IS NOT NULL;
VEC_FROM_TEXT('[]') IS NOT NULL
1
SELECT VEC_FROM_TEXT('[]') IS NULL;
VEC_FROM_TEXT('[]') IS NULL
0

-- Test WHERE Clause

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');
embedding
[1,2,3]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');
embedding
[1,2,3]

-- Test Vector BETWEEN ... AND ... Operators

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding BETWEEN '[1, 2, 3]' AND '[4, 5, 6]';
embedding
[1,2,3]
[4,5,6]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding BETWEEN '[1, 2, 3]' AND '[4, 5, 6]';
embedding
[1,2,3]
[4,5,6]

-- Test IN / NOT IN Operators

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]');
Error 1105 (HY000): VectorFloat32 is not supported for IN()
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]');
Error 1105 (HY000): VectorFloat32 is not supported for IN()
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]');
Error 1105 (HY000): VectorFloat32 is not supported for IN()
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding NOT IN ('[1, 2, 3]', '[4, 5, 6]');
Error 1105 (HY000): VectorFloat32 is not supported for IN()

-- Test Vector Arithmetic Operators

SELECT VEC_FROM_TEXT('[1,2]') + VEC_FROM_TEXT('[2,3]');
Error 1105 (HY000): Vector does not support plus operator

-- Test Comparison Operators

SELECT VEC_FROM_TEXT('[]') = VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]') = VEC_FROM_TEXT('[]')
1
SELECT VEC_FROM_TEXT('[]') != VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]') != VEC_FROM_TEXT('[]')
0
SELECT VEC_FROM_TEXT('[]') > VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]') > VEC_FROM_TEXT('[]')
0
SELECT VEC_FROM_TEXT('[]') >= VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]') >= VEC_FROM_TEXT('[]')
1
SELECT VEC_FROM_TEXT('[]') < VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]') < VEC_FROM_TEXT('[]')
0
SELECT VEC_FROM_TEXT('[]') <= VEC_FROM_TEXT('[]');
VEC_FROM_TEXT('[]') <= VEC_FROM_TEXT('[]')
1
SELECT VEC_FROM_TEXT('[1, 2, 3]') = VEC_FROM_TEXT('[1, 2, 3]');
VEC_FROM_TEXT('[1, 2, 3]') = VEC_FROM_TEXT('[1, 2, 3]')
1
SELECT VEC_FROM_TEXT('[1, 2, 3]') != VEC_FROM_TEXT('[1, 2, 3]');
VEC_FROM_TEXT('[1, 2, 3]') != VEC_FROM_TEXT('[1, 2, 3]')
0
SELECT VEC_FROM_TEXT('[1, 2, 3]') > VEC_FROM_TEXT('[1]');
VEC_FROM_TEXT('[1, 2, 3]') > VEC_FROM_TEXT('[1]')
1
SELECT VEC_FROM_TEXT('[1, 2, 3]') >= VEC_FROM_TEXT('[1]');
VEC_FROM_TEXT('[1, 2, 3]') >= VEC_FROM_TEXT('[1]')
1
SELECT VEC_FROM_TEXT('[1, 2, 3]') < VEC_FROM_TEXT('[1]');
VEC_FROM_TEXT('[1, 2, 3]') < VEC_FROM_TEXT('[1]')
0
SELECT VEC_FROM_TEXT('[1, 2, 3]') <= VEC_FROM_TEXT('[1]');
VEC_FROM_TEXT('[1, 2, 3]') <= VEC_FROM_TEXT('[1]')
0
SELECT VEC_FROM_TEXT('[1, 2, 3]') > '[1]';
VEC_FROM_TEXT('[1, 2, 3]') > '[1]'
1
SELECT VEC_FROM_TEXT('[1, 2, 3]') >= '[1]';
VEC_FROM_TEXT('[1, 2, 3]') >= '[1]'
1
SELECT VEC_FROM_TEXT('[1, 2, 3]') < '[1]';
VEC_FROM_TEXT('[1, 2, 3]') < '[1]'
0
SELECT VEC_FROM_TEXT('[1, 2, 3]') <= '[1]';
VEC_FROM_TEXT('[1, 2, 3]') <= '[1]'
0

-- Test CAST() Operator

SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS BINARY);
CAST(VEC_FROM_TEXT('[1,2,3]') AS BINARY)
[1,2,3]
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS CHAR);
CAST(VEC_FROM_TEXT('[1,2,3]') AS CHAR)
[1,2,3]
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS JSON);
Error 1105 (HY000): cannot cast from vector<float> to json
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DECIMAL(2));
Error 1105 (HY000): cannot cast from vector<float> to decimal
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DOUBLE);
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS FLOAT);
Error 1105 (HY000): cannot cast from vector<float> to float
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS REAL);
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS SIGNED);
Error 1105 (HY000): cannot cast from vector<float> to bigint
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS UNSIGNED);
Error 1105 (HY000): cannot cast from vector<float> to bigint
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS YEAR);
Error 1105 (HY000): cannot cast from vector<float> to year
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATETIME);
Error 1105 (HY000): cannot cast from vector<float> to datetime
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATE);
Error 1105 (HY000): cannot cast from vector<float> to date
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS TIME);
Error 1105 (HY000): cannot cast from vector<float> to time
SELECT CAST('[1,2,3]' AS VECTOR);
CAST('[1,2,3]' AS VECTOR)
[1,2,3]
SELECT CAST('[1,2,3]' AS VECTOR<FLOAT>);
CAST('[1,2,3]' AS VECTOR<FLOAT>)
[1,2,3]
SELECT CAST('[1,2,3]' AS VECTOR<DOUBLE>);
Error 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 40 near ");"Only VECTOR<FLOAT> is supported for now 

-- Test CONVERT() Function

SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), BINARY);
CONVERT(VEC_FROM_TEXT('[1,2,3]'), BINARY)
[1,2,3]
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), CHAR);
CONVERT(VEC_FROM_TEXT('[1,2,3]'), CHAR)
[1,2,3]
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), JSON);
Error 1105 (HY000): cannot cast from vector<float> to json
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DECIMAL);
Error 1105 (HY000): cannot cast from vector<float> to decimal
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DOUBLE);
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), FLOAT);
Error 1105 (HY000): cannot cast from vector<float> to float
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), REAL);
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), SIGNED);
Error 1105 (HY000): cannot cast from vector<float> to bigint
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), UNSIGNED);
Error 1105 (HY000): cannot cast from vector<float> to bigint
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), YEAR);
Error 1105 (HY000): cannot cast from vector<float> to year
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATETIME);
Error 1105 (HY000): cannot cast from vector<float> to datetime
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATE);
Error 1105 (HY000): cannot cast from vector<float> to date
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), TIME);
Error 1105 (HY000): cannot cast from vector<float> to time
SELECT CONVERT('[1,2,3]', VECTOR);
CONVERT('[1,2,3]', VECTOR)
[1,2,3]
SELECT CONVERT('[1,2,3]', VECTOR<FLOAT>);
CONVERT('[1,2,3]', VECTOR<FLOAT>)
[1,2,3]
SELECT CONVERT('[1,2,3]', VECTOR<DOUBLE>);
Error 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 41 near ");"Only VECTOR<FLOAT> is supported for now 

-- Test Aggregate Function

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES
('[8.7, 5.7, 7.7, 9.8, 1.5]'),
('[3.6, 9.7, 2.4, 6.6, 4.9]'),
('[4.7, 4.9, 2.6, 5.2, 7.4]'),
('[4.7, 4.9, 2.6, 5.2, 7.4]'),
('[7.7, 6.7, 8.3, 7.8, 5.7]'),
('[1.4, 4.5, 8.5, 7.7, 6.2]');

-- Test COUNT() Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(embedding) FROM t;
COUNT(embedding)
6
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(embedding) FROM t;
COUNT(embedding)
6
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(*), embedding FROM t GROUP BY embedding ORDER BY embedding;
COUNT(*)	embedding
1	[1.4,4.5,8.5,7.7,6.2]
1	[3.6,9.7,2.4,6.6,4.9]
2	[4.7,4.9,2.6,5.2,7.4]
1	[7.7,6.7,8.3,7.8,5.7]
1	[8.7,5.7,7.7,9.8,1.5]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(*), embedding FROM t GROUP BY embedding ORDER BY embedding;
COUNT(*)	embedding
1	[1.4,4.5,8.5,7.7,6.2]
1	[3.6,9.7,2.4,6.6,4.9]
2	[4.7,4.9,2.6,5.2,7.4]
1	[7.7,6.7,8.3,7.8,5.7]
1	[8.7,5.7,7.7,9.8,1.5]
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(DISTINCT embedding) FROM t;
COUNT(DISTINCT embedding)
5
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(DISTINCT embedding) FROM t;
COUNT(DISTINCT embedding)
5

-- Test MIN() / MAX() Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ MIN(embedding) FROM t;
MIN(embedding)
[1.4,4.5,8.5,7.7,6.2]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ MIN(embedding) FROM t;
MIN(embedding)
[1.4,4.5,8.5,7.7,6.2]
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ MAX(embedding) FROM t;
MAX(embedding)
[8.7,5.7,7.7,9.8,1.5]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ MAX(embedding) FROM t;
MAX(embedding)
[8.7,5.7,7.7,9.8,1.5]

-- Test SUM() / AVG() Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ SUM(embedding) FROM t;
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ SUM(embedding) FROM t;
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ AVG(embedding) FROM t;
Error 1105 (HY000): cannot cast from vector<float> to double
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ AVG(embedding) FROM t;
Error 1105 (HY000): cannot cast from vector<float> to double

-- Test HAVING Clause

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding FROM t GROUP BY embedding HAVING embedding > VEC_FROM_TEXT('[4.7,4.9,2.6,5.2,7.4]') ORDER BY embedding;
embedding
[7.7,6.7,8.3,7.8,5.7]
[8.7,5.7,7.7,9.8,1.5]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding FROM t GROUP BY embedding HAVING embedding > VEC_FROM_TEXT('[4.7,4.9,2.6,5.2,7.4]') ORDER BY embedding;
embedding
[7.7,6.7,8.3,7.8,5.7]
[8.7,5.7,7.7,9.8,1.5]

-- Test Window Function

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,601]'), ('[4,5,61]');

-- Test FIRST_VALUE() / LAST_VALUE() / NTH_VALUE() Window Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last FROM t WINDOW w AS (ORDER BY embedding)ORDER BY embedding;
embedding	first	second	last
[1,2,3]	[1,2,3]	NULL	[1,2,3]
[4,5,61]	[1,2,3]	[4,5,61]	[4,5,61]
[4,5,601]	[1,2,3]	[4,5,61]	[4,5,601]
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last FROM t WINDOW w AS (ORDER BY embedding)ORDER BY embedding;
embedding	first	second	last
[1,2,3]	[1,2,3]	NULL	[1,2,3]
[4,5,61]	[1,2,3]	[4,5,61]	[4,5,61]
[4,5,601]	[1,2,3]	[4,5,61]	[4,5,601]
DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,6]'), ('[4,5,6]'), ('[7,8,9]');

-- Test ROW_NUMBER() / RANK() / DENSE_RANK() Window Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
embedding	row_num	rank	dense_rank
[1,2,3]	1	1	1
[4,5,6]	2	2	2
[4,5,6]	3	2	2
[7,8,9]	4	4	3
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
embedding	row_num	rank	dense_rank
[1,2,3]	1	1	1
[4,5,6]	2	2	2
[4,5,6]	3	2	2
[7,8,9]	4	4	3

-- Test LAG() / LEAD() Window Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
embedding	lag	lead
[1,2,3]	NULL	[4,5,6]
[4,5,6]	[1,2,3]	[4,5,6]
[4,5,6]	[4,5,6]	[7,8,9]
[7,8,9]	[4,5,6]	NULL
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
embedding	lag	lead
[1,2,3]	NULL	[4,5,6]
[4,5,6]	[1,2,3]	[4,5,6]
[4,5,6]	[4,5,6]	[7,8,9]
[7,8,9]	[4,5,6]	NULL

-- Test PARTITION BY / ORDER BY Clause in Window Function

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num' FROM t ORDER BY embedding;
embedding	row_num
[1,2,3]	1
[4,5,6]	1
[4,5,6]	2
[7,8,9]	1
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num' FROM t ORDER BY embedding;
embedding	row_num
[1,2,3]	1
[4,5,6]	1
[4,5,6]	2
[7,8,9]	1

-- Test TRUNCATE TABLE Statement

TRUNCATE TABLE t;
