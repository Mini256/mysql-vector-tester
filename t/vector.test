-- echo -- Test Variable
-- echo

SET @a = VEC_FROM_TEXT('[1,2,3]');
SELECT @a;

-- echo
-- echo -- Test CREATE/DROP TABLE Statement
-- echo

DROP TABLE IF EXISTS t;

SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE = 0;
-- error ER_UNKNOWN_ERROR
CREATE TABLE t (embedding VECTOR);

SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE = 1;
CREATE TABLE t (embedding VECTOR);

-- echo
-- echo -- Test ALTER TABLE Statement
-- echo

ALTER TABLE t SET TIFLASH REPLICA 1;
SELECT SLEEP(10);
SELECT REPLICA_COUNT, AVAILABLE, PROGRESS FROM INFORMATION_SCHEMA.TIFLASH_REPLICA WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 't';

-- echo
-- echo -- Test INSERT Statement
-- echo

INSERT INTO t VALUES ('[1,2.1,3.3]');
-- error ER_UNKNOWN_ERROR
INSERT INTO t VALUES ('[1,2.1,null]');
-- error ER_UNKNOWN_ERROR
INSERT INTO t VALUES ('[1,2.1,inf]');
-- error ER_UNKNOWN_ERROR
INSERT INTO t VALUES ('[1,2.1,nan]');
INSERT INTO t VALUES ('[]');
INSERT INTO t VALUES (NULL);
INSERT INTO t VALUES ('[4,5,6]'), ('[7,8,9]');
INSERT INTO t (SELECT '[1,2,3]' UNION SELECT '[1,2,3]');

-- echo
-- echo -- Test UPDATE Statement
-- echo

UPDATE t SET embedding = VEC_FROM_TEXT('[1,2,3]') WHERE embedding = VEC_FROM_TEXT('[1,2.1,3.3]');

BEGIN;
SELECT * FROM t WHERE embedding = VEC_FROM_TEXT('[]') FOR UPDATE;
UPDATE t SET embedding = NULL WHERE embedding = VEC_FROM_TEXT('[]');
COMMIT;

-- echo
-- echo -- Test DELETE Statement
-- echo

DELETE FROM t WHERE embedding IS NULL;

-- echo
-- echo -- Test SELECT Statement
-- echo

-- sorted_result
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t;
-- sorted_result
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t;

-- echo
-- echo -- Test ANALYZE TABLE Statement
-- echo

ANALYZE TABLE t;

-- echo
-- echo -- Test ORDER BY Clause
-- echo

DELETE FROM t WHERE 1 = 1;

INSERT INTO t VALUES
    ('[8.7, 5.7, 7.7, 9.8, 1.5]'),
    ('[3.6, 9.7, 2.4, 6.6, 4.9]'),
    ('[4.7, 4.9, 2.6, 5.2, 7.4]'),
    ('[7.7, 6.7, 8.3, 7.8, 5.7]'),
    ('[1.4, 4.5, 8.5, 7.7, 6.2]');

SELECT * FROM t ORDER BY embedding DESC;

-- echo
-- echo -- Test VEC_DIMS() Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ VEC_DIMS(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ VEC_DIMS(embedding) FROM t;
SELECT VEC_DIMS(NULL);
SELECT VEC_DIMS('[]');
SELECT VEC_DIMS('[5, 3, 2]');

-- echo
-- echo -- Test Vector VEC_FROM_TEXT() Function
-- echo

SELECT VEC_FROM_TEXT('[]');

-- echo
-- echo -- Test IS Operators
-- echo

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1, 2, 3]'), ('[4, 5, 6]'), ('[7, 8, 9]');

SELECT VEC_FROM_TEXT('[]') IS TRUE;
SELECT VEC_FROM_TEXT('[]') IS FALSE;
SELECT VEC_FROM_TEXT('[]') IS UNKNOWN;
SELECT VEC_FROM_TEXT('[]') IS NOT NULL;
SELECT VEC_FROM_TEXT('[]') IS NULL;

-- echo
-- echo -- Test WHERE Clause
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');

-- echo
-- echo -- Test Vector BETWEEN ... AND ... Operators
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding BETWEEN '[1, 2, 3]' AND '[4, 5, 6]';
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding BETWEEN '[1, 2, 3]' AND '[4, 5, 6]';

-- echo
-- echo -- Test IN / NOT IN Operators
-- echo

-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]');
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]');

-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IN ('[1, 2, 3]', '[4, 5, 6]');
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding NOT IN ('[1, 2, 3]', '[4, 5, 6]');

-- echo
-- echo -- Test Vector Arithmetic Operators
-- echo

-- error ER_UNKNOWN_ERROR
SELECT VEC_FROM_TEXT('[1,2]') + VEC_FROM_TEXT('[2,3]');

-- echo
-- echo -- Test Comparison Operators
-- echo

SELECT VEC_FROM_TEXT('[]') = VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') != VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') > VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') >= VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') < VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') <= VEC_FROM_TEXT('[]');

SELECT VEC_FROM_TEXT('[1, 2, 3]') = VEC_FROM_TEXT('[1, 2, 3]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') != VEC_FROM_TEXT('[1, 2, 3]');

SELECT VEC_FROM_TEXT('[1, 2, 3]') > VEC_FROM_TEXT('[1]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') >= VEC_FROM_TEXT('[1]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') < VEC_FROM_TEXT('[1]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') <= VEC_FROM_TEXT('[1]');

SELECT VEC_FROM_TEXT('[1, 2, 3]') > '[1]';
SELECT VEC_FROM_TEXT('[1, 2, 3]') >= '[1]';
SELECT VEC_FROM_TEXT('[1, 2, 3]') < '[1]';
SELECT VEC_FROM_TEXT('[1, 2, 3]') <= '[1]';

-- echo
-- echo -- Test CAST() Operator
-- echo

SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS BINARY);
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS CHAR);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS JSON);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DECIMAL(2));
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DOUBLE);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS FLOAT);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS REAL);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS SIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS UNSIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS YEAR);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATETIME);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATE);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS TIME);

SELECT CAST('[1,2,3]' AS VECTOR);
SELECT CAST('[1,2,3]' AS VECTOR<FLOAT>);
-- error ER_PARSE_ERROR
SELECT CAST('[1,2,3]' AS VECTOR<DOUBLE>);

-- echo
-- echo -- Test CONVERT() Function
-- echo

SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), BINARY);
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), CHAR);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), JSON);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DECIMAL);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DOUBLE);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), FLOAT);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), REAL);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), SIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), UNSIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), YEAR);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATETIME);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATE);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), TIME);

SELECT CONVERT('[1,2,3]', VECTOR);
SELECT CONVERT('[1,2,3]', VECTOR<FLOAT>);
-- error ER_PARSE_ERROR
SELECT CONVERT('[1,2,3]', VECTOR<DOUBLE>);

-- echo
-- echo -- Test Aggregate Function
-- echo

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES
    ('[8.7, 5.7, 7.7, 9.8, 1.5]'),
    ('[3.6, 9.7, 2.4, 6.6, 4.9]'),
    ('[4.7, 4.9, 2.6, 5.2, 7.4]'),
    ('[4.7, 4.9, 2.6, 5.2, 7.4]'),
    ('[7.7, 6.7, 8.3, 7.8, 5.7]'),
    ('[1.4, 4.5, 8.5, 7.7, 6.2]');

-- echo
-- echo -- Test COUNT() Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(embedding) FROM t;

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(*), embedding FROM t GROUP BY embedding ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(*), embedding FROM t GROUP BY embedding ORDER BY embedding;

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(DISTINCT embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(DISTINCT embedding) FROM t;

-- echo
-- echo -- Test MIN() / MAX() Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ MIN(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ MIN(embedding) FROM t;

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ MAX(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ MAX(embedding) FROM t;

-- echo
-- echo -- Test SUM() / AVG() Function
-- echo

-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ SUM(embedding) FROM t;
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ SUM(embedding) FROM t;

-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ AVG(embedding) FROM t;
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ AVG(embedding) FROM t;

-- echo
-- echo -- Test HAVING Clause
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding FROM t GROUP BY embedding HAVING embedding > VEC_FROM_TEXT('[4.7,4.9,2.6,5.2,7.4]') ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding FROM t GROUP BY embedding HAVING embedding > VEC_FROM_TEXT('[4.7,4.9,2.6,5.2,7.4]') ORDER BY embedding;

-- echo
-- echo -- Test Window Function
-- echo

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,601]'), ('[4,5,61]');

-- echo
-- echo -- Test FIRST_VALUE() / LAST_VALUE() / NTH_VALUE() Window Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last FROM t WINDOW w AS (ORDER BY embedding)ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last FROM t WINDOW w AS (ORDER BY embedding)ORDER BY embedding;

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,6]'), ('[4,5,6]'), ('[7,8,9]');

-- echo
-- echo -- Test ROW_NUMBER() / RANK() / DENSE_RANK() Window Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;

-- echo
-- echo -- Test LAG() / LEAD() Window Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;

-- echo
-- echo -- Test PARTITION BY / ORDER BY Clause in Window Function
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num' FROM t ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num' FROM t ORDER BY embedding;

-- echo
-- echo -- Test TRUNCATE TABLE Statement
-- echo

# Note: TRUNCATE TABLE Command will delete the TiFlash replica.
TRUNCATE TABLE t;