-- echo -- Test user-defined variable
-- echo

SET @a = VEC_FROM_TEXT('[1,2,3]');
SELECT @a;

-- echo
-- echo -- Test system variable: TIDB_ENABLE_VECTOR_TYPE
-- echo

SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE = 0;
DROP TABLE IF EXISTS t;
-- error ER_UNKNOWN_ERROR
CREATE TABLE t (embedding VECTOR);
-- echo
SET @@GLOBAL.TIDB_ENABLE_VECTOR_TYPE = 1;
CREATE TABLE t (embedding VECTOR);

-- echo
-- echo -- Prepare test data and enable TiFlash replica

-- echo
ALTER TABLE t SET TIFLASH REPLICA 1;

-- echo
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (id INT, embedding VECTOR);
ALTER TABLE t1 SET TIFLASH REPLICA 1;
INSERT INTO t1  VALUES (1, '[1,2,3]'), (2, '[4,5,6]');

-- echo
DROP TABLE IF EXISTS t2;
CREATE TABLE t2 (id INT, embedding VECTOR);
ALTER TABLE t2 SET TIFLASH REPLICA 1;
INSERT INTO t2 VALUES (3, '[4,5,6]'), (4, '[7,8,9]');

SELECT SLEEP(10);
SELECT REPLICA_COUNT, AVAILABLE, PROGRESS FROM INFORMATION_SCHEMA.TIFLASH_REPLICA WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME IN ('t', 't1', 't2') ORDER BY TABLE_NAME;

-- echo
-- echo -- Test statement: INSERT
-- echo

INSERT INTO t VALUES (VEC_FROM_TEXT('[1,2.1,3.3]'));
-- error ER_UNKNOWN_ERROR
INSERT INTO t VALUES ('[1,2.1,null]');
-- error ER_UNKNOWN_ERROR
INSERT INTO t VALUES ('[1,2.1,inf]');
-- error ER_UNKNOWN_ERROR
INSERT INTO t VALUES ('[1,2.1,nan]');
INSERT INTO t VALUES ('[]');
INSERT INTO t VALUES (NULL);
-- echo
INSERT INTO t VALUES ('[4,5,6]'), ('[7,8,9]');
-- echo
-- echo -- Test statement:  INSERT ... SELECT ...
CREATE TABLE tmp (embedding VECTOR);
INSERT INTO tmp SELECT embedding FROM t;
SELECT embedding FROM tmp ORDER BY embedding;
DROP TABLE tmp;

-- echo
-- echo -- Test statement: UPDATE
-- echo

UPDATE t SET embedding = VEC_FROM_TEXT('[1,2,3]') WHERE embedding = VEC_FROM_TEXT('[1,2.1,3.3]');

BEGIN;
SELECT * FROM t WHERE embedding = VEC_FROM_TEXT('[]') FOR UPDATE;
UPDATE t SET embedding = NULL WHERE embedding = VEC_FROM_TEXT('[]');
COMMIT;

-- echo
-- echo -- Test statement: DELETE
-- echo

DELETE FROM t WHERE embedding IS NULL;

-- echo
-- echo -- Test statement: SELECT
-- echo

-- sorted_result
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t;
-- echo
-- sorted_result
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t;

-- echo
-- echo -- Prepare test data

-- echo
DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,6]'), ('[7,8,9]'), (NULL), ('[]');

-- echo
-- echo -- Test statement: ANALYZE TABLE

-- echo
ANALYZE TABLE t;

-- echo
-- echo -- Test vector functions

-- echo
-- echo -- Test vector function: VEC_DIMS()

-- echo
SELECT VEC_DIMS(NULL);
-- echo
SELECT VEC_DIMS('[]');
-- echo
SELECT VEC_DIMS('[5, 3, 2]');

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ VEC_DIMS(embedding) FROM t ORDER BY embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ VEC_DIMS(embedding) FROM t ORDER BY embedding;

-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ VEC_DIMS(embedding) FROM t ORDER BY embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ VEC_DIMS(embedding) FROM t ORDER BY embedding;

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding FROM t WHERE VEC_DIMS(embedding) = 3 ORDER BY embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding FROM t WHERE VEC_DIMS(embedding) = 3 ORDER BY embedding;

-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding FROM t WHERE VEC_DIMS(embedding) = 3 ORDER BY embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding FROM t WHERE VEC_DIMS(embedding) = 3 ORDER BY embedding;

-- echo
-- echo -- Test vector function: VEC_FROM_TEXT()

-- echo
SELECT VEC_FROM_TEXT('[]');

-- echo
-- echo -- Test operator: IS

-- echo
SELECT VEC_FROM_TEXT('[]') IS TRUE;
SHOW WARNINGS;
SELECT VEC_FROM_TEXT('[]') IS FALSE;
SHOW WARNINGS;
SELECT VEC_FROM_TEXT('[]') IS UNKNOWN;
SHOW WARNINGS;

-- echo
SELECT VEC_FROM_TEXT('[]') IS NOT NULL;
SELECT VEC_FROM_TEXT('[]') IS NULL;

-- echo
-- echo -- Test arithmetic operators: + / - / * / /

-- echo
-- error ER_UNKNOWN_ERROR
SELECT VEC_FROM_TEXT('[1,2]') + VEC_FROM_TEXT('[2,3]');

-- echo
-- echo -- Test comparison operators

-- echo
SELECT VEC_FROM_TEXT('[]') = VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') != VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') > VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') >= VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') < VEC_FROM_TEXT('[]');
SELECT VEC_FROM_TEXT('[]') <= VEC_FROM_TEXT('[]');

-- echo
SELECT VEC_FROM_TEXT('[1, 2, 3]') = VEC_FROM_TEXT('[1, 2, 3]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') != VEC_FROM_TEXT('[1, 2, 3]');

-- echo
SELECT VEC_FROM_TEXT('[1, 2, 3]') > VEC_FROM_TEXT('[1]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') >= VEC_FROM_TEXT('[1]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') < VEC_FROM_TEXT('[1]');
SELECT VEC_FROM_TEXT('[1, 2, 3]') <= VEC_FROM_TEXT('[1]');

-- echo
SELECT VEC_FROM_TEXT('[1, 2, 3]') > '[1]';
SELECT VEC_FROM_TEXT('[1, 2, 3]') >= '[1]';
SELECT VEC_FROM_TEXT('[1, 2, 3]') < '[1]';
SELECT VEC_FROM_TEXT('[1, 2, 3]') <= '[1]';

-- echo
-- echo -- Test clause: WHERE

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IS NULL;

-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding IS NULL;
-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding = '[]';

-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding = '[]';
-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');

-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding = VEC_FROM_TEXT('[1,2,3]');
-- echo
DELETE FROM t WHERE t.embedding IS NULL OR t.embedding = '[]';

-- echo
-- echo -- Test operator: BETWEEN ... AND ...

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding BETWEEN '[1,2,3]' AND '[4,5,6]';
-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding BETWEEN '[1,2,3]' AND '[4,5,6]';

-- echo
-- echo -- Test operator: IN / NOT IN

-- echo
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IN ('[1,2,3]', '[4,5,6]');
-- echo
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding IN ('[1,2,3]', '[4,5,6]');

-- echo
-- echo -- Test operator: LIKE

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding LIKE '%2%';
-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding LIKE '%2%';

-- echo
-- echo -- Test operator: ILIKE

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding ILIKE '%2%';
-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding ILIKE '%2%';

-- echo
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t WHERE embedding IN ('[1,2,3]', '[4,5,6]');
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t WHERE embedding NOT IN ('[1,2,3]', '[4,5,6]');

-- echo
-- echo -- Test clause: HAVING

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding FROM t GROUP BY embedding HAVING embedding > VEC_FROM_TEXT('[4,5,6]') ORDER BY embedding;
-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding FROM t GROUP BY embedding HAVING embedding > VEC_FROM_TEXT('[4,5,6]') ORDER BY embedding;

-- echo
-- echo -- Prepare test data

-- echo
DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES
    ('[8.7, 5.7, 7.7, 9.8, 1.5]'),
    ('[3.6, 9.7, 2.4, 6.6, 4.9]'),
    ('[4.7, 4.9, 2.6, 5.2, 7.4]'),
    ('[7.7, 6.7, 8.3, 7.8, 5.7]'),
    ('[1.4, 4.5, 8.5, 7.7, 6.2]');

-- echo
-- echo -- Test clause: ORDER BY

-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ * FROM t ORDER BY embedding DESC;

-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ * FROM t ORDER BY embedding DESC;


-- echo
-- echo -- Test comparison functions/operators
-- echo

-- echo
-- echo -- Test conversion operator: CAST()
-- echo

SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS BINARY);
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS CHAR);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS JSON);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DECIMAL(2));
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DOUBLE);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS FLOAT);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS REAL);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS SIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS UNSIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS YEAR);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATETIME);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS DATE);
-- error ER_UNKNOWN_ERROR
SELECT CAST(VEC_FROM_TEXT('[1,2,3]') AS TIME);

SELECT CAST('[1,2,3]' AS VECTOR);
SELECT CAST('[1,2,3]' AS VECTOR<FLOAT>);
-- error ER_PARSE_ERROR
SELECT CAST('[1,2,3]' AS VECTOR<DOUBLE>);

-- echo
-- echo -- Test conversion function: CONVERT()
-- echo

SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), BINARY);
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), CHAR);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), JSON);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DECIMAL);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DOUBLE);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), FLOAT);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), REAL);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), SIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), UNSIGNED);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), YEAR);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATETIME);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), DATE);
-- error ER_UNKNOWN_ERROR
SELECT CONVERT(VEC_FROM_TEXT('[1,2,3]'), TIME);

SELECT CONVERT('[1,2,3]', VECTOR);
SELECT CONVERT('[1,2,3]', VECTOR<FLOAT>);
-- error ER_PARSE_ERROR
SELECT CONVERT('[1,2,3]', VECTOR<DOUBLE>);

-- echo
-- echo -- Test control flow functions
-- echo

-- echo
-- echo -- Test control flow function: IF()
-- echo
SELECT IF(VEC_FROM_TEXT('[1, 2, 3]'), 1, 0) AS result;
-- error ER_UNKNOWN_ERROR
SELECT IF(TRUE, VEC_FROM_TEXT('[1, 2, 3]'), VEC_FROM_TEXT('[4, 5, 6]')) AS result;

-- echo
-- echo -- Test control flow function: IFNULL()
-- echo
SELECT IFNULL(VEC_FROM_TEXT('[1, 2, 3]'), 1) AS result;
-- error ER_UNKNOWN_ERROR
SELECT IFNULL(NULL, VEC_FROM_TEXT('[1, 2, 3]')) AS result;

-- echo
-- echo -- Test control flow function: NULLIF()
-- echo
-- error ER_UNKNOWN_ERROR
SELECT NULLIF(VEC_FROM_TEXT('[1, 2, 3]'), VEC_FROM_TEXT('[1, 2, 3]')) AS result;
-- error ER_UNKNOWN_ERROR
SELECT NULLIF(VEC_FROM_TEXT('[1, 2, 3]'), VEC_FROM_TEXT('[4, 5, 6]')) AS result;

-- echo
-- echo -- Test flow function operator: CASE WHEN
-- echo
-- error ER_UNKNOWN_ERROR
SELECT CASE WHEN TRUE THEN VEC_FROM_TEXT('[1, 2, 3]') ELSE VEC_FROM_TEXT('[4, 5, 6]') END AS result;

-- echo
-- echo -- Test comparison functions
-- echo

-- echo
-- echo -- Test comparison function: GREATEST()
-- echo

-- error ER_UNKNOWN_ERROR
SELECT GREATEST(VEC_FROM_TEXT('[1, 2, 3]'), VEC_FROM_TEXT('[4, 5, 6]'), VEC_FROM_TEXT('[7, 8, 9]')) AS result;

-- echo
-- echo -- Test comparison function: LEAST()
-- echo

-- error ER_UNKNOWN_ERROR
SELECT LEAST(VEC_FROM_TEXT('[1, 2, 3]'), VEC_FROM_TEXT('[4, 5, 6]'), VEC_FROM_TEXT('[7, 8, 9]')) AS result;

-- echo
-- echo -- Test comparison function: COALESCE()
-- echo

-- error ER_UNKNOWN_ERROR
SELECT COALESCE(VEC_FROM_TEXT('[1, 2, 3]'), VEC_FROM_TEXT('[4, 5, 6]')) AS result;
-- error ER_UNKNOWN_ERROR
SELECT COALESCE(NULL, VEC_FROM_TEXT('[1, 2, 3]')) AS result;
SELECT COALESCE(VEC_FROM_TEXT('[1, 2, 3]'), 1) AS result;
SELECT COALESCE(VEC_FROM_TEXT('[1, 2, 3]'), '1') AS result;

-- echo
-- echo -- Prepare test data
-- echo

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES
    ('[8.7, 5.7, 7.7, 9.8, 1.5]'),
    ('[3.6, 9.7, 2.4, 6.6, 4.9]'),
    ('[4.7, 4.9, 2.6, 5.2, 7.4]'),
    ('[4.7, 4.9, 2.6, 5.2, 7.4]'),
    ('[7.7, 6.7, 8.3, 7.8, 5.7]'),
    ('[1.4, 4.5, 8.5, 7.7, 6.2]');

-- echo
-- echo -- Test aggregate functions
-- echo

-- echo
-- echo -- Test aggregate function: COUNT()
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(embedding) FROM t;

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(*), embedding FROM t GROUP BY embedding ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(*), embedding FROM t GROUP BY embedding ORDER BY embedding;

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ COUNT(DISTINCT embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ COUNT(DISTINCT embedding) FROM t;

-- echo
-- echo -- Test aggregate function: MIN()
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ MIN(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ MIN(embedding) FROM t;

-- echo
-- echo -- Test aggregate function: MAX()
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ MAX(embedding) FROM t;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ MAX(embedding) FROM t;

-- echo
-- echo -- Test aggregate function: SUM()
-- echo

-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ SUM(embedding) FROM t;
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ SUM(embedding) FROM t;

-- echo
-- echo -- Test aggregate function: AVG()
-- echo

-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ AVG(embedding) FROM t;
-- error ER_UNKNOWN_ERROR
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ AVG(embedding) FROM t;

-- echo
-- echo -- Test window function
-- echo

DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,601]'), ('[4,5,61]');

-- echo
-- echo -- Test window functions: FIRST_VALUE() / LAST_VALUE() / NTH_VALUE()
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, FIRST_VALUE(embedding) OVER w AS first, NTH_VALUE(embedding, 2) OVER w AS second, LAST_VALUE(embedding) OVER w AS last FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;

-- echo
-- echo -- Prepare test data
-- echo
DELETE FROM t WHERE 1 = 1;
INSERT INTO t VALUES ('[1,2,3]'), ('[4,5,6]'), ('[4,5,6]'), ('[7,8,9]');

-- echo
-- echo -- Test window functions: ROW_NUMBER() / RANK() / DENSE_RANK()
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, ROW_NUMBER() OVER w AS 'row_num', RANK() OVER w AS 'rank', DENSE_RANK() OVER w AS 'dense_rank' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;

-- echo
-- echo -- Test window functions: LAG() / LEAD()
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, LAG(embedding) OVER w AS 'lag', LEAD(embedding) OVER w AS 'lead' FROM t WINDOW w AS (ORDER BY embedding) ORDER BY embedding;

-- echo
-- echo -- Test window function clause: PARTITION BY / ORDER BY
-- echo

SELECT /*+ READ_FROM_STORAGE(TIKV[t]) */ embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num' FROM t ORDER BY embedding;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t]) */ embedding, ROW_NUMBER() OVER (PARTITION BY embedding ORDER BY embedding) AS 'row_num' FROM t ORDER BY embedding;

-- echo
-- echo -- Test statement: SHOW CREATE TABLE
-- echo

SHOW CREATE TABLE t;

-- echo
-- echo -- Test statement: DESC
-- echo

DESC t;

-- echo
-- echo -- Test table: INFORMATION_SCHEMA.COLUMNS
-- echo
SELECT * FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 't';

-- echo
-- echo -- Test statement: TRUNCATE TABLE
-- echo

# Note: TRUNCATE TABLE Command will delete the TiFlash replica.
CREATE TABLE t3 (embedding VECTOR);
INSERT INTO t3 VALUES ('[1,2,3]'), ('[4,5,6]'), ('[7,8,9]');
SELECT embedding FROM t3;
TRUNCATE TABLE t3;
SELECT embedding FROM t3;
DROP TABLE t3;

-- echo
-- echo -- Test feature: TEMPORARY TABLE
-- echo

CREATE TEMPORARY TABLE t3 (embedding VECTOR);
INSERT INTO t3 VALUES ('[1,2,3]'), ('[4,5,6]'), ('[7,8,9]');
SELECT * FROM t3;
DROP TABLE t3;

-- echo
-- echo -- Test DDL: VECTOR column with NOT NULL flag
-- echo

CREATE TABLE t3 (id INT, embedding VECTOR NOT NULL);
INSERT INTO t3 VALUES (1, '[1,2,3]'), (2, '[4,5,6]'), (3, '[7,8,9]');
INSERT INTO t3 VALUES (4, '[]');
-- error ER_BAD_NULL_ERROR
INSERT INTO t3 VALUES (4, NULL);
DROP TABLE t3;

-- echo
-- echo -- Test DDL: VECTOR column with DEFAULT flag
-- echo
CREATE TABLE t3 (id INT, embedding VECTOR NOT NULL DEFAULT '[0,0,0]');
INSERT INTO t3(id) VALUES (1);
SELECT * FROM t3 WHERE id = 1;
DROP TABLE t3;

-- echo
-- echo -- Test feature: SubQuery
-- echo

-- echo -- Test SubQuery type: using sub-query as scalar
SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ t1.embedding, (SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ MAX(t2.embedding) FROM t2) AS max_in_t2 FROM t1;
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ t1.embedding, (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ MAX(t2.embedding) FROM t2) AS max_in_t2 FROM t1;
-- echo

-- echo -- Test SubQuery type: using sub-query as derived table
SELECT embedding FROM (SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ embedding FROM t1 ORDER BY embedding LIMIT 1) derived_table;
SELECT embedding FROM (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ embedding FROM t1 ORDER BY embedding LIMIT 1) derived_table;
-- echo

-- echo -- Test SubQuery type: using sub-query in the existential test
SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ t1.embedding FROM t1 WHERE EXISTS(SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ 1 FROM t2 WHERE t1.embedding = t2.embedding);
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ t1.embedding FROM t1 WHERE EXISTS(SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ 1 FROM t2 WHERE t1.embedding = t2.embedding);
-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ t1.embedding FROM t1 WHERE t1.embedding NOT IN (SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ t2.embedding FROM t2);
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ t1.embedding FROM t1 WHERE t1.embedding NOT IN (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ t2.embedding FROM t2);
-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ t1.embedding FROM t1 WHERE t1.embedding IN (SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ t2.embedding FROM t2);
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ t1.embedding FROM t1 WHERE t1.embedding IN (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ t2.embedding FROM t2);
-- echo

-- echo -- Test SubQuery type: using sub-query in the quantified comparison
SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ t1.embedding FROM t1 WHERE t1.embedding = ANY(SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ t2.embedding FROM t2);
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ t1.embedding FROM t1 WHERE t1.embedding = ANY(SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ t2.embedding FROM t2);
-- echo

-- echo -- Test SubQuery type: using sub-query as operands of operators
SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ t2.embedding FROM t2 WHERE t2.embedding > (SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ MAX(t1.embedding) FROM t1);
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ t2.embedding FROM t2 WHERE t2.embedding > (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ MAX(t1.embedding) FROM t1);
-- echo

-- echo
-- echo -- Test clause: UNION / EXCEPT / INTERSECT
-- echo
-- sorted_result
SELECT t1.embedding FROM t1 UNION SELECT t2.embedding FROM t2;
-- sorted_result
SELECT t1.embedding FROM t1 UNION ALL SELECT t2.embedding FROM t2;
SELECT t1.embedding FROM t1 EXCEPT SELECT t2.embedding FROM t2;
SELECT t1.embedding FROM t1 INTERSECT SELECT t2.embedding FROM t2;

-- echo
-- echo -- Test clause: JOIN
-- echo
SELECT /*+ READ_FROM_STORAGE(TIKV[t1], TIKV[t2]) */ t1.embedding, t2.embedding FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIKV[t1], TIKV[t2]) */ t1.embedding, t2.embedding FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1], TIKV[t2]) */ t1.embedding, t2.embedding FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1], TIKV[t2]) */ t1.embedding, t2.embedding FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
-- echo
SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1], TIFLASH[t2]) */ t1.embedding, t2.embedding FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
EXPLAIN FORMAT='brief' SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1], TIFLASH[t2]) */ t1.embedding, t2.embedding FROM t1 JOIN t2 ON t1.embedding = t2.embedding;

-- echo
-- echo -- Test feature: CTE
-- echo
WITH t1 AS (SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ * FROM t1), t2 AS (SELECT /*+ READ_FROM_STORAGE(TIKV[t2]) */ * FROM t2) SELECT * FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
WITH t1 AS (SELECT /*+ READ_FROM_STORAGE(TIKV[t1]) */ * FROM t1), t2 AS (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ * FROM t2) SELECT * FROM t1 JOIN t2 ON t1.embedding = t2.embedding;
WITH t1 AS (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t1]) */ * FROM t1), t2 AS (SELECT /*+ READ_FROM_STORAGE(TIFLASH[t2]) */ * FROM t2) SELECT * FROM t1 JOIN t2 ON t1.embedding = t2.embedding;

-- echo
-- echo -- Test feature: Prepared Statement
-- echo
PREPARE stmt FROM 'SELECT * FROM t1 WHERE embedding = ?';
SET @a = VEC_FROM_TEXT('[1,2,3]');
EXECUTE stmt USING @a;
DEALLOCATE PREPARE stmt;
